#!/bin/bash
set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

request=$(mktemp --tmpdir cf-blue-green-resource-out.XXXXXX)

cat > $request <&0

DIR=${1-$(pwd)}

cd $DIR

APP=$(jq -r '.params.name // ""' < $request)
MANIFEST=$(jq -r '.params.manifest // ""' < $request)
APP_PATH=$(jq -r '.params.path // ""' < $request)
HEALTH_CHECK=$(jq -r '.params.health_check // ""' < $request)
POST_INSTALL=$(jq -r '.params.post_install // ""' < $request)
HOSTNAME=$(jq -r ".params.hostname // \"$APP\"" < $request)

API=$(jq -r '.source.api // ""' < $request)
USER=$(jq -r '.source.username // ""' < $request)
PASSWORD=$(jq -r '.source.password // ""' < $request)
ORG=$(jq -r '.source.organization // ""' < $request)
SPACE=$(jq -r '.source.space // ""' < $request)

[[ -z "$APP" ]]          && echo "'params.app' must be set to the base PCF application name!" || echo "APP : $APP"
[[ -z "$HOSTNAME" ]]     && echo "'params.hostname' must be set to the main route hostname!" || echo "HOSTNAME : $HOSTNAME"
[[ -z "$MANIFEST" ]]     && echo "'params.manifest' must be set to the path of the manifest file to deploy!" || echo "MANIFEST : $MANIFEST"
[[ -z "$DOMAIN" ]]       && echo "'params.domain' not set!" || echo "DOMAIN : $DOMAIN"
[[ -z "$APP_PATH" ]]     && echo "'params.jar' must be set to the path of the application to deploy!" || echo "PATH : $APP_PATH"
[[ -z "$HEALTH_CHECK" ]] && echo "'params.health_check' not set!" || echo "HEALTH_CHECK : $HEALTH_CHECK"
[[ -z "$POST_INSTALL" ]] && echo "'params.post_install' not set!" || echo "POST_INSTALL : $POST_INSTALL"
[[ -z "$API" ]]          && echo "'source.api' must be set to the PCF API endpoint!" || echo "API : $API"
[[ -z "$USER" ]]         && echo "'source.user' must be set to the username for PCF deployment!" || echo "USER : $USER"
[[ -z "$PASSWORD" ]]     && echo "'source.password' must be set to the password for PCF deployment!" || echo "PASSWORD : **********"
[[ -z "$ORG" ]]          && echo "'source.org' must be set to the organization for PCF deployment!" || echo "ORG : $ORG"
[[ -z "$SPACE" ]]        && echo "'source.space' must be set to the space for PCF deployment!" || echo "SPACE : $SPACE"

echo "Deploying application from"
ls $APP_PATH

echo "cf login --skip-ssl-validation -a $API -u $USER -p ********** -o $ORG -s $SPACE"
cf login --skip-ssl-validation -a $API -u $USER -p $PASSWORD -o "$ORG" -s "$SPACE"

set +e
cf routes | grep -oP "$SPACE\s+$HOSTNAME\s+.+$APP-green" # verify if normal route is mapped to green app

if [ $? -eq 0 ]
then
    CURRENT=green
    NEXT=blue
else
    CURRENT=blue
    NEXT=green
fi

echo "Current: ${APP}-${CURRENT}"
echo "New    : ${APP}-${NEXT}"

set -e

if [[ -z $DOMAIN ]]
then
    DOMAIN=`cf domains | grep -Eo '^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,6}'` | head -n 1
fi

export APP CURRENT HOSTNAME NEXT DOMAIN

echo "Deleting old ${APP}-${NEXT}"
cf delete -f -r "${APP}-${NEXT}"

echo "Deploying and starting ${APP}-${NEXT} with hostname ${HOSTNANE}-${NEXT} for health check"
cf push "${APP}-${NEXT}" -n "${HOSTNAME}-${NEXT}" -p $APP_PATH -f "$MANIFEST"

set +e

[[ -z "$HEALTH_CHECK" ]] && echo "Skipping Health Check" || $HEALTH_CHECK

if [ $? -eq 0 ]
then
    echo "Deleting ${APP}-${NEXT} for health check"
    cf delete -f -r "${APP}-${NEXT}"

    echo "Deploying and starting ${APP}-${NEXT} on main route (https://$HOSTNAME.$DOMAIN)"
    cf push "${APP}-${NEXT}" -n $HOSTNAME -p $APP_PATH -f "$MANIFEST"

    if [ $? -ne 0 ]
    then
        cf unmap-route "${APP}-${NEXT}" $DOMAIN -n $HOSTNAME
        echo "Unable to start new app instance (after health check)"
        exit 1
    fi

    echo "Removing main route for ${APP}-${CURRENT}"
    cf map-route "${APP}-${CURRENT}" $DOMAIN -n "$HOSTNAME-venerable" # autosleep needs a route to be able to unbind the application when it'll be deleted in next deploy
    cf unmap-route "${APP}-${CURRENT}" $DOMAIN -n $HOSTNAME

    echo "Stopping ${APP}-${CURRENT}"
    cf stop "${APP}-${CURRENT}"

    [[ -n "$POST_INSTALL" ]] && $POST_INSTALL

    echo "Deployement successful!"

    VERSION=$(date +%s)
    jq -n "{
        version: {timestamp: \"$VERSION\"},
        metadata: [
            { name: \"deployed\", value: \"${APP}-${NEXT}\"},
            { name: \"url\", value: \"https://${HOSTNAME}.${DOMAIN}\"}
        ]
    }" >&3

    exit 0
else
    echo "Heath check failed!"
    cf stop "${APP}-${NEXT}"
    exit 1
fi
